From a4d5bf07d39f3b1f5f26c9ef9af93fb1ef3b8a90 Mon Sep 17 00:00:00 2001
From: sandro <sandroama123@gmail.com>
Date: Sun, 26 Jun 2022 16:39:17 -0400
Subject: [PATCH] Create Patch File

---
 err.txt       | 11 +++++++++++
 src/App.tsx   | 33 +++++++++++++++++++++++++--------
 src/Graph.tsx | 13 ++++++++++---
 3 files changed, 46 insertions(+), 11 deletions(-)
 create mode 100644 err.txt

diff --git a/err.txt b/err.txt
new file mode 100644
index 0000000..6c48157
--- /dev/null
+++ b/err.txt
@@ -0,0 +1,11 @@
+Failed to compile
+/Users/sandroamaglobeli/Documents/GitHub/JPMorganChase-SWE-Internship/JPMC-tech-task-2-PY3/src/Graph.tsx
+Type error: Cannot find module '@jpmorganchase/perspective'.  TS2307
+
+    1 | import React, { Component } from 'react';
+  > 2 | import { Table } from '@jpmorganchase/perspective';
+      |                       ^
+    3 | import { ServerRespond } from './DataStreamer';
+    4 | import './Graph.css';
+    5 | 
+This error occurred during the build time and cannot be dismissed.
\ No newline at end of file
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..dd62576 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,14 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import { clearInterval } from 'timers';
 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +24,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,20 +32,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph){ // rendering graph when user clicks start Streaming
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x=0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({ 
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if(x>1000){
+        clearInterval(interval);
+      }
+    },100);
   }
 
+
   /**
    * Render the App react component
    */
@@ -59,12 +73,15 @@ class App extends Component<{}, IState> {
             // As part of your task, update the getDataFromServer() function
             // to keep requesting the data every 100ms until the app is closed
             // or the server does not return anymore data.
+
             onClick={() => {this.getDataFromServer()}}>
             Start Streaming Data
+
           </button>
-          <div className="Graph">
+          {/* graph designated area  */}
+          <div className="Graph">  
             {this.renderGraph()}
-          </div>
+          </div> 
         </div>
       </div>
     )
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..a88d730 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,8 +1,10 @@
 import React, { Component } from 'react';
-import { Table } from '@jpmorganchase/perspective';
+import { Table } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import './Graph.css';
 
+// OLD import { Table } from '@jpmorganchase/perspective';
+// NEW import { Table } from '@finos/perspective';
 /**
  * Props declaration for <Graph />
  */
@@ -14,7 +16,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +34,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +51,11 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates', `{"stock":"distinct count","top_ask_price":"avg","top_bid_price":"avg","timestamp":"distinct count"}`);
     }
   }
 
-- 
2.32.1 (Apple Git-133)

